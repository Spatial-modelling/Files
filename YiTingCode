############################################################
############################################################
## the country we wanna run our project: Peru.

##  Identify the optimal areas for consrvation.
##  Analysis of additionality.
##  Is it viable given the revenues of crops in these areas?
##  What carbon prices would we need?
##  Identification of optimal areas for conservation of interest subject to biodiversity co-benefits.
##  Which species would benefit from that location? Which KBAs?
##  Use spatial optimization to identify the areas.
##  Create Pareto and trade-off analysis using spatial optimization.
############################################################
############################################################
library(terra)
library(rgeos)
library(raster)
library(sp)
library(rgdal)
library(pacman)
library(sf)
library(e1071)
library(rredlist)
library("FinancialMath")
library(dplyr)
require(gurobi)
install.packages("prioritizr", repos = "http://cran.us.r-project.org")
library(prioritizr)

################################################################
####################### prepare the data #######################
########## Peru map  ###########
countries = vect("world_countries_boundary_file_world_2002.shp")
peru = countries[countries$NAME=="Peru"]
peru_r = rast(ext(peru),nrow=150,ncol=100)
PUs= terra::as.polygons(peru_r)
PUs <- terra::intersect(PUs,peru)
plot(PUs)

########## Avoid carbon emission.##########
## above-ground biomass
#AGB = rast("Avitabile_AGB_Map.tif")
#peru0 = terra::project(peru,crs(AGB))
#AGB_peru = mask(AGB,peru0)

## soil carbon
#SOC = rast("GSOCmap1.5.0.tif")
#peru0 = terra::project(peru,crs(SOC))
#SOC_peru = mask(SOC,peru0)

## deforestation risk
#def_risk = rast("Global_transition_potential.tif")
#peru0 = terra::project(peru,crs(def_risk))
#def_risk_peru = mask(def_risk,peru0)

## accessibility
#accessibility =rast("accessibility_to_cities_2015_v1.0.tif")
#peru0 = terra::project(peru,crs(accessibility))
#accessibility_peru = mask(accessibility,peru0)

## accessibility
#agri_rent =rast("Rent2016.tif")
#peru0 = terra::project(peru,crs(agri_rent))
#agri_rent_peru = mask(agri_rent,peru0)

## project all to AGB_peru
#SOC_peru = terra::project(SOC_peru,crs(AGB_peru))
#def_risk_peru = terra::project(def_risk_peru,crs(AGB_peru))
#accessibility_peru = terra::project(accessibility_peru,crs(AGB_peru))
#agri_rent_peru = terra::project(agri_rent_peru,crs(AGB_peru))

## write maps to computer
#writeRaster(AGB_peru,"AGB_peru.tiff",overwrite = T, NAflag = 0)
#writeRaster(SOC_peru,"SOC_peru.tiff",overwrite = T, NAflag = 0)
#writeRaster(def_risk_peru,"def_risk_peru.tiff",overwrite = T, NAflag = 0)
#writeRaster(accessibility_peru,"accessibility_peru.tiff",overwrite = T, NAflag = 0)
#writeRaster(agri_rent_peru,"agri_rent_peru.tiff",overwrite = T, NAflag = 0)


#AGB_peru = rast("AGB_peru.tiff")
#SOC_peru = rast("SOC_peru.tiff")

## Assuming that the ratio of below-ground biomass to above-ground biomass in Peru is similar to that of tropical forests.
## Use the IPCC ratio to obtain a map of below-ground biomass.
#BG_peru = 0.37*AGB_peru

## Make the soil carbon map compatible in terms of resolution and extent with the above-ground biomass map.
#r1 = SOC_peru
#r2 = AGB_peru
#r.new = resample(r1, r2, "bilinear")
#ex = ext(r.new)
#r2 = crop(r2, ex)
#r.new = mask(r.new, r2)
#AGB_peru2 = r2
#SOC_peru2 = r.new

## Combine the above-ground, below-ground and soil carbon map  
## to estimate CO2 emissions of natural habitat conversion to agriculture. 
#AGB_peru_CO2 = AGB_peru2*0.49*(44/12)
#BG_peru_CO2 = BG_peru*0.49*(44/12)
# assume 75% retained by agricultural land use.
#SOC_peru_CO2 = SOC_peru2*(44/12)*0.25
# Assuming a litter and dead wood density of 2.1 tons/ha.
#Litter_peru_CO2 = 2.1*(44/12)

# Total CO2 emission.
#total_CO2 = AGB_peru_CO2 + BG_peru_CO2 + SOC_peru_CO2 + Litter_peru_CO2

#writeRaster(total_CO2,"total_CO2.tiff",overwrite = T, NAflag = 0)

CO2_peru = rast("total_CO2.tiff")
def_risk_peru = rast("def_risk_peru.tiff")
agri_rent_peru = rast("agri_rent_peru.tiff")

########## PA ##########
PAs = vect("WDPA_WDOECM_Apr2023_Public_PER_shp-polygons.shp")
PAs_peru = terra:: project(PAs,crs(peru))
r = rast(ext(peru),nrow=400,ncol=400)
crs(r) = crs(peru)
PAs_peru$val1 = rep(1,nrow(PAs_peru))
PAs_peru = rasterize(PAs_peru, r, field="val1", background = 0)
plot(PAs_peru)
PAs_peru = mask(PAs_peru,peru)
plot(PAs_peru)

########## species ##########

# pacman::p_load(tidyverse, rredlist, rvest, Rcpp)
# MAMMALS = vect("MAMMALS.shp")
# head(MAMMALS)
# mammalsCR = MAMMALS[MAMMALS$category == "CR",]
# mammalsEN = MAMMALS[MAMMALS$category == "EN",]
# mammalsVU = MAMMALS[MAMMALS$category == "VU",]
# writeVector(mammalsCR, "mammalsCR.shp", filetype=NULL, layer=NULL,insert=FALSE, overwrite=F)
# writeVector(mammalsEN, "mammalsEN.shp", filetype=NULL, layer=NULL,insert=FALSE, overwrite=F)
# writeVector(mammalsVU, "mammalsVU.shp", filetype=NULL, layer=NULL,insert=FALSE, overwrite=F)

# AMPHIBIANS = vect("AMPHIBIANS.shp")
# head(AMPHIBIANS)
# amphibiansCR = AMPHIBIANS[AMPHIBIANS$category == "CR",]
# amphibiansEN = AMPHIBIANS[AMPHIBIANS$category == "EN",]
# amphibiansVU = AMPHIBIANS[AMPHIBIANS$category == "VU",]
# writeVector(amphibiansCR, "amphibiansCR.shp", filetype=NULL, layer=NULL,insert=FALSE, overwrite=F)
# writeVector(amphibiansEN, "amphibiansEN.shp", filetype=NULL, layer=NULL,insert=FALSE, overwrite=F)
# writeVector(amphibiansVU, "amphibiansVU.shp", filetype=NULL, layer=NULL,insert=FALSE, overwrite=F)

# mammalsCR = vect("mammalsCR.shp")
# mammalsCR_peru <- terra::intersect(mammalsCR,peru)
# plot(mammalsCR_peru)
# crs(peru) == crs(mammalsCR)
# mammalsEN = vect("mammalsEN.shp")
# mammalsEN_peru <- terra::intersect(mammalsEN,peru)
# plot(mammalsEN_peru)
# crs(peru) == crs(mammalsEN)
# mammalsVU = vect("mammalsVU.shp")
# mammalsVU_peru <- terra::intersect(mammalsVU,peru)
# plot(mammalsVU_peru)
# crs(peru) == crs(mammalsVU)
 
# amphibiansCR = vect("amphibiansCR.shp")
# amphibiansCR_peru <- terra::intersect(amphibiansCR,peru)
# plot(amphibiansCR_peru)
# crs(peru) == crs(amphibiansCR)
# amphibiansEN = vect("amphibiansEN.shp")
# amphibiansEN_peru <- terra::intersect(amphibiansEN,peru)
# plot(amphibiansEN_peru)
# crs(peru) == crs(amphibiansEN)
# amphibiansVU = vect("amphibiansVU.shp")
# amphibiansVU_peru <- terra::intersect(amphibiansVU,peru)
# plot(amphibiansVU_peru)
# crs(peru) == crs(amphibiansVU)

# spsCbd = rbind(mammalsCR_peru,mammalsEN_peru,mammalsVU_peru,amphibiansCR_peru,amphibiansEN_peru,amphibiansVU_peru)
# head(spsCbd)

#output1 = matrix(0,nrow=nrow(PUs),ncol=nrow(spsCbd))
#This loops through all the species, makes them a raster and extracts them to the planning units
#for(i in 1:nrow(spsCbd)){
  
#  sps_i = spsCbd[i,]
  
#  r <- rast(ext(peru),nrow=200,ncol=200)
#  crs(r) = crs(peru)
#  sps_i$val1 = rep(1,nrow(sps_i))
#  sps_i_ras <- raster::rasterize(sps_i, r, field="val1", 
#                                 background = 0)
  
#  print(i)
  
#  output1[,i] = extract(x = sps_i_ras, y = PUs, method='simple', buffer=NULL,fun=mean, na.rm=TRUE)$val1
  
#}#closes species loop

########## add all the useful layers we prepared to the planning units shapefile ##########
# CO2t = extract(x = CO2_peru, y = PUs, method='simple', buffer=NULL,fun=mean, na.rm=TRUE)[,2]
# CO2t[is.nan(CO2t)] = 0
# PUs$CO2 = CO2t
# PUs$AR = extract(x = agri_rent_peru, y = PUs, method='simple', buffer=NULL,fun=mean, na.rm=TRUE)[,2]
# PUs$PA = extract(x = PAs_peru, y = PUs, method='simple', buffer=NULL,fun=mean, na.rm=TRUE)[,2]
# PUs$defRisk = extract(x = def_risk_peru, y = PUs, method='simple', buffer=NULL,fun=mean, na.rm=TRUE)[,2]
# head(PUs)

########## bring now the species together with the planning units ##########
# head(spsCbd)
# spsCbd$SCINAME = stringr::str_replace_all(spsCbd$sci_name," ","_")
# colnames(output1) = spsCbd$SCINAME
# PUs2 = cbind(PUs,data.frame(output1))
# head(PUs2)
# writeVector(PUs2, "PUs2.shp", filetype=NULL, layer=NULL,overwrite=TRUE)

#read planning units shapefile with all the data
 PUs2 <- vect("PUs2.shp")
#prioritizr does not work with the spat objects from Terra, we need to transform them to sp type of objects
 PUs3 = as(PUs2, "Spatial")
#prioritizr can take planning units as polygons but expects the biodiversity units as a raster stack
 listRast = list()
#all species
 head(PUs2)
 spsCol = 15:ncol(PUs2)
 spsCol = 15:251

for(i in spsCol){
  r <- rast(ext(PUs2),nrow=150,ncol=100)
  r1 = rasterize(PUs2, r, field=names(PUs2)[i], background = 0)
  listRast[[i]] <- raster(r1)
  print(i)
}

#Stack 237 species together
spsStack2 <- stack(listRast[spsCol])

#We simplify the PUs with only the costs and whether PUs are protected
PUs4 = PUs3[,c("AR","PA","CO2","defRisk")]

#play the distribution of the first eight species.
plot(spsStack2[[1:8]], main = paste("Species", 1:8))
################################################################



################################################################
##################### spatial optimization #####################
##########build our optimization model








